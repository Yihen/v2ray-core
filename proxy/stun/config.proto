syntax = "proto3";

package v2ray.core.proxy.stun;
option csharp_namespace = "V2Ray.Core.Proxy.Stun";
option go_package = "stun";
option java_package = "com.v2ray.core.proxy.stun";
option java_multiple_files = true;

message ID {
    // net_key of the peer (we no longer use the public key as the peer ID, but use it to verify messages)
    bytes net_key = 1;
    // address is the network address of the peer
    string address = 2;
    // id is the computed hash of the net key
    bytes id = 3;
    //used in communication with proxy server
    bytes connection_id=4;
}

message Message {
    bytes message = 1;

    // Sender's address and net key.
    ID sender = 2;

    // Sender's signature of message.
    bytes signature = 3;

    // request_nonce is the request/response ID. Null if ID associated to a message is not a request/response.
    uint64 request_nonce = 4;

    // message_nonce is the sequence ID.
    uint64 message_nonce = 5;

    // reply_flag indicates this is a reply to a request
    bool reply_flag = 6;

    // opcode specifies the message type
    uint32 opcode = 7;

    uint32 netID = 8;
}

message Ping {
}

message Pong {
}

message LookupNodeRequest {
    ID target = 1;
}

message LookupNodeResponse {
    repeated ID peers = 1;
}

message Bytes {
    bytes data = 1;
}
message Keepalive {
}

message KeepaliveResponse {
}

message Disconnect{
}

message ProxyRequest {
    string origin_address = 1;
    string proxy_address = 2;
}

message ProxyResponse {
    string origin_address = 1;
    string proxy_address = 2;
}

message MetricRequest{
    int64 send_timestamp = 1;
    bytes raw_data = 2;
}

message MetricResponse{
    int64 send_timestamp = 1;
    bytes raw_data = 2;
}
