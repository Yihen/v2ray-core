// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iface.proto

package seedlist

import (
	context "context"
	fmt "fmt"
	math "math"

	types "v2ray.com/core/p2p/wire/pb/seedlist/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("iface.proto", fileDescriptor_0ac32d09acae4b8b) }

var fileDescriptor_0ac32d09acae4b8b = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8d, 0xb1, 0x0a, 0xc2, 0x30,
	0x14, 0x45, 0x9d, 0xb4, 0xc4, 0xc9, 0xe0, 0xe4, 0xe8, 0x07, 0xe4, 0x81, 0xe2, 0xac, 0x9b, 0x0e,
	0x4e, 0xf6, 0x0b, 0x92, 0xf6, 0xaa, 0x81, 0xa7, 0x09, 0x2f, 0x91, 0x92, 0xbf, 0x17, 0x23, 0x4a,
	0xc7, 0x73, 0x39, 0x9c, 0xab, 0xe6, 0xfe, 0x6a, 0x3b, 0x98, 0x28, 0x21, 0x07, 0xdd, 0x24, 0xa0,
	0x67, 0x9f, 0xf2, 0x6a, 0x7f, 0xf3, 0xf9, 0xfe, 0x72, 0xa6, 0x0b, 0x0f, 0xb2, 0xcc, 0xc9, 0x3f,
	0x29, 0x45, 0x2b, 0x12, 0x06, 0x1a, 0xbc, 0x80, 0xa2, 0xa3, 0x9f, 0x4b, 0xb9, 0x44, 0xa4, 0x3f,
	0x7e, 0x53, 0x9b, 0x83, 0x9a, 0x1d, 0x05, 0xc8, 0x10, 0xbd, 0x53, 0x4d, 0x6b, 0xcb, 0x09, 0xcc,
	0x41, 0x2f, 0x4d, 0xb5, 0x4d, 0xa5, 0x16, 0xe8, 0xcf, 0x9f, 0xb7, 0xc5, 0x78, 0xbd, 0x20, 0x72,
	0x59, 0x4f, 0xdc, 0xb4, 0x86, 0xb6, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x3a, 0x33, 0x7b,
	0xa2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *types.HelloSeedList, opts ...grpc.CallOption) (*types.HelloReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *types.HelloSeedList, opts ...grpc.CallOption) (*types.HelloReply, error) {
	out := new(types.HelloReply)
	err := c.cc.Invoke(ctx, "/seedlist.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *types.HelloSeedList) (*types.HelloReply, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.HelloSeedList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seedlist.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*types.HelloSeedList))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seedlist.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iface.proto",
}
